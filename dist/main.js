(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #261f26;\n  font-family: Rubik;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#content {\n  box-shadow: inset 4px 4px 5px #261f26;\n  background-color: #5c6f73;\n  width: 89vw;\n  display: flex;\n  flex-direction: column;\n  padding: 3vh 10vh 10vh 10vh;\n  border-radius: 25px;\n  gap: 2vh;\n}\n\n#header {\n  display: flex;\n  justify-content: center;\n  padding: 1.5vh;\n  background-color: #261f26;\n  width: 100vw;\n  height: 10vh;\n  color: #d6d9d2;\n}\n\n#nav {\n  background-color: #261f26;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 90vh;\n  width: 10vw;\n  color: #d6d9d2;\n}\n\n#createNew {\n  cursor: pointer;\n}\n\n.li {\n  font-weight: 400;\n  cursor: pointer;\n}\n\n#createNew:hover,\n.li:hover {\n  color: #a2df57;\n}\n\n#todoForm {\n  display: flex;\n  gap: 4vw;\n}\n\n#title,\n#description,\n#dueDate,\n#priority {\n  border-radius: 25px;\n}\n\n/*#clearBtn {\n  max-width: 7vw;\n}*/\n\n#submitBtn {\n  background: none;\n  color: rgb(33, 175, 28);\n  border: none;\n  padding: 0 0 0 0;\n  font-weight: 900;\n  font-size: 24px;\n  -webkit-text-stroke: 1px black;\n  cursor: pointer;\n  outline: inherit;\n}\n\n#trashBtn {\n  color: rgb(226, 49, 49);\n  cursor: pointer;\n}\n\n#todoCard {\n  padding: 1vh;\n  gap: 10vw;\n  border-radius: 7px;\n  background-color: rgba(9, 22, 38, 0.7);\n  color: rgb(245, 241, 241);\n  box-shadow: 5px 5px 5px black;\n}\n#todoMain,\n#hiddenCard {\n  display: flex;\n  align-items: center;\n  max-width: 20vw;\n  gap: 10vw;\n  border-radius: 7px;\n  color: rgb(245, 241, 241);\n  animation: fadein 1.5s;\n}\n\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.expandBtn {\n  padding: 1.5vh;\n  max-height: 5vh;\n}\n\n.cardElem {\n  min-width: 10%;\n}\n.visible {\n  height: 15vh;\n  background-color: rgba(34, 50, 65, 0.7) !important;\n}\n\n.cardElemHidden {\n  visibility: visible !important;\n}\n\n#todoDiv {\n  display: flex;\n  flex-direction: column;\n  gap: 2vh;\n}\n\n#frontText {\n  display: flex;\n  justify-content: flex-end;\n  max-width: 45vw;\n  gap: 0.5vh;\n  margin-bottom: 2vh;\n}\n\n#frontText p {\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,qCAAqC;EACrC,yBAAyB;EACzB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,cAAc;EACd,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,8BAA8B;EAC9B,YAAY;EACZ,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,eAAe;AACjB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;;EAEE;;AAEF;EACE,gBAAgB;EAChB,uBAAuB;EACvB,YAAY;EACZ,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;EACf,8BAA8B;EAC9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,SAAS;EACT,kBAAkB;EAClB,sCAAsC;EACtC,yBAAyB;EACzB,6BAA6B;AAC/B;AACA;;EAEE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,kBAAkB;EAClB,yBAAyB;EACzB,sBAAsB;AACxB;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EACE,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,YAAY;EACZ,kDAAkD;AACpD;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,eAAe;EACf,UAAU;EACV,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #261f26;\n  font-family: Rubik;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#content {\n  box-shadow: inset 4px 4px 5px #261f26;\n  background-color: #5c6f73;\n  width: 89vw;\n  display: flex;\n  flex-direction: column;\n  padding: 3vh 10vh 10vh 10vh;\n  border-radius: 25px;\n  gap: 2vh;\n}\n\n#header {\n  display: flex;\n  justify-content: center;\n  padding: 1.5vh;\n  background-color: #261f26;\n  width: 100vw;\n  height: 10vh;\n  color: #d6d9d2;\n}\n\n#nav {\n  background-color: #261f26;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 90vh;\n  width: 10vw;\n  color: #d6d9d2;\n}\n\n#createNew {\n  cursor: pointer;\n}\n\n.li {\n  font-weight: 400;\n  cursor: pointer;\n}\n\n#createNew:hover,\n.li:hover {\n  color: #a2df57;\n}\n\n#todoForm {\n  display: flex;\n  gap: 4vw;\n}\n\n#title,\n#description,\n#dueDate,\n#priority {\n  border-radius: 25px;\n}\n\n/*#clearBtn {\n  max-width: 7vw;\n}*/\n\n#submitBtn {\n  background: none;\n  color: rgb(33, 175, 28);\n  border: none;\n  padding: 0 0 0 0;\n  font-weight: 900;\n  font-size: 24px;\n  -webkit-text-stroke: 1px black;\n  cursor: pointer;\n  outline: inherit;\n}\n\n#trashBtn {\n  color: rgb(226, 49, 49);\n  cursor: pointer;\n}\n\n#todoCard {\n  padding: 1vh;\n  gap: 10vw;\n  border-radius: 7px;\n  background-color: rgba(9, 22, 38, 0.7);\n  color: rgb(245, 241, 241);\n  box-shadow: 5px 5px 5px black;\n}\n#todoMain,\n#hiddenCard {\n  display: flex;\n  align-items: center;\n  max-width: 20vw;\n  gap: 10vw;\n  border-radius: 7px;\n  color: rgb(245, 241, 241);\n  animation: fadein 1.5s;\n}\n\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.expandBtn {\n  padding: 1.5vh;\n  max-height: 5vh;\n}\n\n.cardElem {\n  min-width: 10%;\n}\n.visible {\n  height: 15vh;\n  background-color: rgba(34, 50, 65, 0.7) !important;\n}\n\n.cardElemHidden {\n  visibility: visible !important;\n}\n\n#todoDiv {\n  display: flex;\n  flex-direction: column;\n  gap: 2vh;\n}\n\n#frontText {\n  display: flex;\n  justify-content: flex-end;\n  max-width: 45vw;\n  gap: 0.5vh;\n  margin-bottom: 2vh;\n}\n\n#frontText p {\n  text-align: center;\n}\n"],sourceRoot:""}]);const d=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],d=0;d<n.length;d++){var c=n[d],l=o.base?c[0]+o.base:c[0],A=i[l]||0,s="".concat(l," ").concat(A);i[l]=A+1;var p=t(s),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=r(u,o);o.byIndex=d,e.splice(d,0,{identifier:s,updater:m,references:1})}a.push(s)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var d=t(i[a]);e[d].references--}for(var c=o(n,r),l=0;l<i.length;l++){var A=t(i[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n={};t.r(n),t.d(n,{JV:()=>r,Z6:()=>e});let e=0,o=[];function r(){class n{constructor(n,e,t,o,r){this.title=n,this.description=e,this.dueDate=t,this.priority=o,this.num=r}}let e=document.querySelector("form");e.addEventListener("submit",(function(t){!function(t){let r=document.getElementById("title").value,i=document.getElementById("description").value,a=document.getElementById("dueDate").value,d=document.getElementById("priority").value,c=JSON.parse(localStorage.getItem("pageIndex")),l=new n(r,i,a,d,c);o.push(l),localStorage.setItem("localProjektit",JSON.stringify(o)),e.reset(),t.preventDefault()}(t)}))}var i=t(379),a=t.n(i),d=t(795),c=t.n(d),l=t(569),A=t.n(l),s=t(565),p=t.n(s),u=t(216),m=t.n(u),E=t(589),h=t.n(E),f=t(426),C={};function g(){let n=document.getElementById("content"),e=document.createElement("form");e.id="todoForm";let t=document.createElement("input");t.id="title",t.setAttribute("type","text"),t.setAttribute("name","title"),t.setAttribute("placeholder","Task");let o=document.createElement("input");o.id="description",o.setAttribute("type","text"),o.setAttribute("name","description"),o.setAttribute("placeholder","Description");let r=document.createElement("input");r.id="dueDate",r.setAttribute("type","date"),r.setAttribute("name","dueDate");const i=["Low","Medium","High"];let a=document.createElement("select");a.id="priority",a.setAttribute("type","text"),a.setAttribute("name","priority");const d=document.createElement("p");d.textContent="Priority:";for(var c=0;c<i.length;c++){var l=document.createElement("option");l.value=i[c],l.text=i[c],a.appendChild(l)}let A=document.createElement("input");A.setAttribute("type","submit"),A.setAttribute("value","Add +"),A.id="submitBtn",e.appendChild(t),e.appendChild(o),e.appendChild(r),e.appendChild(d),e.appendChild(a),e.appendChild(A),n.appendChild(e)}C.styleTagTransform=h(),C.setAttributes=p(),C.insert=A().bind(null,"head"),C.domAPI=c(),C.insertStyleElement=m(),a()(f.Z,C),f.Z&&f.Z.locals&&f.Z.locals;let v=0;function B(n){const e=document.createElement("div");e.id="todoDiv";let t=[];for(let e=0;e<n.length;e++)n[e].num==JSON.parse(localStorage.getItem("pageIndex"))&&t.push(n[e]);console.log(t),console.log(JSON.parse(localStorage.getItem("pageIndex")));for(let o=0;o<t.length;o++){const r=document.createElement("div");r.classList.add("cardElem");const i=document.createElement("div");i.classList.add("cardElem");const a=document.createElement("div");a.classList.add("cardElem");const d=document.createElement("div");d.classList.add("cardElem");const c=document.createElement("div");c.classList.add("cardElem");const l=document.createElement("h3"),A=document.createElement("p"),s=document.createElement("p"),p=document.createElement("p"),u=document.createElement("button");u.classList.add("expandBtn"),u.textContent="Open";for(let n in t[o])l.textContent=t[o].title,A.textContent=t[o].description,s.textContent=t[o].dueDate,p.innerHTML="Priority: <br>"+t[o].priority;const m=document.createElement("div");m.id="todoCard",m.dataset.index=o;const E=document.getElementById("content"),h=document.createElement("p");h.id="trashBtn",h.textContent="delete",h.addEventListener("click",(function(){n.splice(m.dataset.index,1),localStorage.setItem("localProjektit",JSON.stringify(n)),b(n)})),r.appendChild(l),i.appendChild(A),a.appendChild(s),d.appendChild(p),c.appendChild(h);const f=document.createElement("div");f.id="todoMain",f.appendChild(r),f.appendChild(a),f.appendChild(u),f.appendChild(c);const C=document.createElement("div");function g(){m.classList.toggle("visible"),m.contains(C)?m.removeChild(C):m.appendChild(C)}C.id="hiddenCard",C.appendChild(i),C.appendChild(d),u.addEventListener("click",g,!1),m.appendChild(f),e.insertBefore(m,e.firstChild),E.appendChild(e)}}function b(n){document.getElementById("content").innerHTML="",x(),g(),B(n)}function x(){const n=document.createElement("div");n.id="frontText";const e=document.createElement("p");e.innerHTML="Welcome! <br> Here you can add task to-do on the list. <br> Click the button to show more information!";const t=document.getElementById("content");n.appendChild(e),t.appendChild(n)}function y(n){document.getElementById("content").innerHTML="",x(),g(),B(n)}null===localStorage.getItem("localProjektit")?n.projektit=[]:n.projektit=JSON.parse(localStorage.getItem("localProjektit"));const w=document.getElementsByClassName("li");var k;e=null===localStorage.getItem("pageIndex")||localStorage.getItem("pageIndex")>w?0:JSON.parse(localStorage.getItem("pageIndex")),console.log(e),console.log(n.projektit),function(n){const e=document.createElement("div");e.id="nav";const t=document.createElement("h3");t.textContent="Projects:",e.appendChild(t);let o=[];o=null===localStorage.getItem("localLinkit")?["Default"]:JSON.parse(localStorage.getItem("localLinkit"));const r=document.createElement("ul");r.classList.add("links");for(let e=0;e<o.length;e++){const t=document.createElement("li");t.dataset.index=e,t.classList.add("li"),t.innerHTML=o[e],t.addEventListener("click",(function(){v=e,localStorage.setItem("pageIndex",JSON.stringify(v));let t=[];for(let e=0;e<n.length;e++)n[e].num==v&&t.push(n[e]);y(t)})),r.appendChild(t)}t.appendChild(r);const i=document.createElement("p");i.id="createNew",i.textContent="New Project +",t.appendChild(i),i.addEventListener("click",(function(){let n=prompt("Project name?");const e=document.createElement("li");e.classList.add("li"),e.textContent=n,t.appendChild(r),r.appendChild(e),o.push(n),localStorage.setItem("localLinkit",JSON.stringify(o))})),t.appendChild(r);const a=document.createElement("div");a.innerHTML="&copy; Petteri Leino, 2021",e.appendChild(a);const d=document.body;d.insertBefore(e,d.firstChild)}(k=n.projektit),function(){const n=document.createElement("div");n.id="header";const e=document.createElement("h1");e.textContent="To-Do List",n.appendChild(e);const t=document.body;t.insertBefore(n,t.firstChild)}(),x(),g(),B(k),r()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,