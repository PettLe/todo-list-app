(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),i=t.n(o),a=t(645),r=t.n(a)()(i());r.push([n.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #261f26;\n  font-family: Rubik;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#content {\n  box-shadow: inset 4px 4px 5px #261f26;\n  background-color: #5c6f73;\n  width: 89vw;\n  display: flex;\n  flex-direction: column;\n  padding: 3vh 10vh 10vh 10vh;\n  border-radius: 25px;\n  gap: 2vh;\n}\n\n#header {\n  display: flex;\n  justify-content: center;\n  padding: 1.5vh;\n  background-color: #261f26;\n  width: 100vw;\n  height: 10vh;\n  color: #d6d9d2;\n}\n\n#nav {\n  background-color: #261f26;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 90vh;\n  width: 10vw;\n  color: #d6d9d2;\n}\n\n#linkDiv {\n  display: flex;\n  max-width: 9vw;\n  justify-content: space-between;\n  /*gap: 1.5vw;*/\n}\n\n#createNew {\n  cursor: pointer;\n}\n\n.li {\n  font-weight: 400;\n  cursor: pointer;\n}\n\n#createNew:hover,\n.li:hover {\n  color: #a2df57;\n}\n\n#todoForm {\n  display: flex;\n  gap: 4vw;\n}\n\n#title,\n#description,\n#dueDate,\n#priority {\n  border-radius: 25px;\n}\n\n/*#clearBtn {\n  max-width: 7vw;\n}*/\n\n#submitBtn {\n  background: none;\n  color: rgb(33, 175, 28);\n  border: none;\n  padding: 0 0 0 0;\n  font-weight: 900;\n  font-size: 24px;\n  -webkit-text-stroke: 1px black;\n  cursor: pointer;\n  outline: inherit;\n}\n\n.material-icons-outlined {\n  font-family: "Material icons";\n}\n\n#trashBtn {\n  font-family: "Material icons";\n  font-size: 1.5rem;\n  color: rgb(226, 49, 49);\n  cursor: pointer;\n}\n\n#todoCard {\n  padding: 1vh;\n  gap: 10vw;\n  border-radius: 7px;\n  background-color: rgba(9, 22, 38, 0.7);\n  color: rgb(245, 241, 241);\n  box-shadow: 5px 5px 5px black;\n}\n#todoMain,\n#hiddenCard {\n  display: flex;\n  align-items: center;\n  max-width: 20vw;\n  gap: 10vw;\n  border-radius: 7px;\n  color: rgb(245, 241, 241);\n  animation: fadein 1.5s;\n}\n\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.expandBtn {\n  font-family: "Material icons";\n  font-size: 2rem;\n  border: 0;\n  padding: 0;\n  background-color: inherit;\n  color: rgb(33, 175, 28);\n  font-weight: 900;\n  max-height: 5vh;\n}\n.expandBtn:hover {\n  cursor: pointer;\n}\n\n.cardElem {\n  min-width: 10%;\n}\n.visible {\n  height: 15vh;\n  background-color: rgba(34, 50, 65, 0.7) !important;\n}\n\n.cardElemHidden {\n  visibility: visible !important;\n}\n\n#todoDiv {\n  display: flex;\n  flex-direction: column;\n  gap: 2vh;\n}\n\n#frontText {\n  display: flex;\n  justify-content: flex-end;\n  max-width: 45vw;\n  gap: 0.5vh;\n  margin-bottom: 2vh;\n}\n\n#allText {\n  text-align: center;\n  padding: 1vh;\n}\nh2 {\n  margin-top: 1vh;\n}\n\n#frontText p {\n  text-align: center;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,qCAAqC;EACrC,yBAAyB;EACzB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,cAAc;EACd,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,8BAA8B;EAC9B,YAAY;EACZ,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,cAAc;EACd,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,eAAe;AACjB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;;EAEE;;AAEF;EACE,gBAAgB;EAChB,uBAAuB;EACvB,YAAY;EACZ,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;EACf,8BAA8B;EAC9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,6BAA6B;EAC7B,iBAAiB;EACjB,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,SAAS;EACT,kBAAkB;EAClB,sCAAsC;EACtC,yBAAyB;EACzB,6BAA6B;AAC/B;AACA;;EAEE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,kBAAkB;EAClB,yBAAyB;EACzB,sBAAsB;AACxB;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EACE,6BAA6B;EAC7B,eAAe;EACf,SAAS;EACT,UAAU;EACV,yBAAyB;EACzB,uBAAuB;EACvB,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,YAAY;EACZ,kDAAkD;AACpD;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,eAAe;EACf,UAAU;EACV,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;AACA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #261f26;\n  font-family: Rubik;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#content {\n  box-shadow: inset 4px 4px 5px #261f26;\n  background-color: #5c6f73;\n  width: 89vw;\n  display: flex;\n  flex-direction: column;\n  padding: 3vh 10vh 10vh 10vh;\n  border-radius: 25px;\n  gap: 2vh;\n}\n\n#header {\n  display: flex;\n  justify-content: center;\n  padding: 1.5vh;\n  background-color: #261f26;\n  width: 100vw;\n  height: 10vh;\n  color: #d6d9d2;\n}\n\n#nav {\n  background-color: #261f26;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 90vh;\n  width: 10vw;\n  color: #d6d9d2;\n}\n\n#linkDiv {\n  display: flex;\n  max-width: 9vw;\n  justify-content: space-between;\n  /*gap: 1.5vw;*/\n}\n\n#createNew {\n  cursor: pointer;\n}\n\n.li {\n  font-weight: 400;\n  cursor: pointer;\n}\n\n#createNew:hover,\n.li:hover {\n  color: #a2df57;\n}\n\n#todoForm {\n  display: flex;\n  gap: 4vw;\n}\n\n#title,\n#description,\n#dueDate,\n#priority {\n  border-radius: 25px;\n}\n\n/*#clearBtn {\n  max-width: 7vw;\n}*/\n\n#submitBtn {\n  background: none;\n  color: rgb(33, 175, 28);\n  border: none;\n  padding: 0 0 0 0;\n  font-weight: 900;\n  font-size: 24px;\n  -webkit-text-stroke: 1px black;\n  cursor: pointer;\n  outline: inherit;\n}\n\n.material-icons-outlined {\n  font-family: "Material icons";\n}\n\n#trashBtn {\n  font-family: "Material icons";\n  font-size: 1.5rem;\n  color: rgb(226, 49, 49);\n  cursor: pointer;\n}\n\n#todoCard {\n  padding: 1vh;\n  gap: 10vw;\n  border-radius: 7px;\n  background-color: rgba(9, 22, 38, 0.7);\n  color: rgb(245, 241, 241);\n  box-shadow: 5px 5px 5px black;\n}\n#todoMain,\n#hiddenCard {\n  display: flex;\n  align-items: center;\n  max-width: 20vw;\n  gap: 10vw;\n  border-radius: 7px;\n  color: rgb(245, 241, 241);\n  animation: fadein 1.5s;\n}\n\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.expandBtn {\n  font-family: "Material icons";\n  font-size: 2rem;\n  border: 0;\n  padding: 0;\n  background-color: inherit;\n  color: rgb(33, 175, 28);\n  font-weight: 900;\n  max-height: 5vh;\n}\n.expandBtn:hover {\n  cursor: pointer;\n}\n\n.cardElem {\n  min-width: 10%;\n}\n.visible {\n  height: 15vh;\n  background-color: rgba(34, 50, 65, 0.7) !important;\n}\n\n.cardElemHidden {\n  visibility: visible !important;\n}\n\n#todoDiv {\n  display: flex;\n  flex-direction: column;\n  gap: 2vh;\n}\n\n#frontText {\n  display: flex;\n  justify-content: flex-end;\n  max-width: 45vw;\n  gap: 0.5vh;\n  margin-bottom: 2vh;\n}\n\n#allText {\n  text-align: center;\n  padding: 1vh;\n}\nh2 {\n  margin-top: 1vh;\n}\n\n#frontText p {\n  text-align: center;\n}\n'],sourceRoot:""}]);const d=r},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(r[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);o&&r[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(i," */"),r=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(r).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},r=[],d=0;d<n.length;d++){var c=n[d],l=o.base?c[0]+o.base:c[0],A=a[l]||0,s="".concat(l," ").concat(A);a[l]=A+1;var p=t(s),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=i(u,o);o.byIndex=d,e.splice(d,0,{identifier:s,updater:m,references:1})}r.push(s)}return r}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=o(n=n||[],i=i||{});return function(n){n=n||[];for(var r=0;r<a.length;r++){var d=t(a[r]);e[d].references--}for(var c=o(n,i),l=0;l<a.length;l++){var A=t(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{let n=0;var e=t(379),o=t.n(e),i=t(795),a=t.n(i),r=t(569),d=t.n(r),c=t(565),l=t.n(c),A=t(216),s=t.n(A),p=t(589),u=t.n(p),m=t(426),E={};function h(){let n=document.getElementById("content"),e=document.createElement("form");e.id="todoForm";let t=document.createElement("input");t.id="title",t.setAttribute("type","text"),t.setAttribute("name","title"),t.setAttribute("placeholder","Task");let o=document.createElement("input");o.id="description",o.setAttribute("type","text"),o.setAttribute("name","description"),o.setAttribute("placeholder","Description");let i=document.createElement("input");i.id="dueDate",i.setAttribute("type","date"),i.setAttribute("name","dueDate");const a=["Low","Medium","High"];let r=document.createElement("select");r.id="priority",r.setAttribute("type","text"),r.setAttribute("name","priority");const d=document.createElement("p");d.textContent="Priority:";for(var c=0;c<a.length;c++){var l=document.createElement("option");l.value=a[c],l.text=a[c],r.appendChild(l)}let A=document.createElement("input");A.setAttribute("type","submit"),A.setAttribute("value","Add +"),A.id="submitBtn",e.appendChild(t),e.appendChild(o),e.appendChild(i),e.appendChild(d),e.appendChild(r),e.appendChild(A),n.appendChild(e)}E.styleTagTransform=u(),E.setAttributes=l(),E.insert=d().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=s(),o()(m.Z,E),m.Z&&m.Z.locals&&m.Z.locals;let C,f=0;function g(n){const e=document.createElement("div");e.id="todoDiv";let t=n.map((n=>Object.assign({},n))),o=[];for(let e=0;e<n.length;e++)n[e].num==JSON.parse(localStorage.getItem("pageIndex"))&&o.push(n[e]);for(let n=0;n<o.length;n++){const i=document.createElement("div");i.classList.add("cardElem");const a=document.createElement("div");a.classList.add("cardElem");const r=document.createElement("div");r.classList.add("cardElem");const d=document.createElement("div");d.classList.add("cardElem");const c=document.createElement("div");c.classList.add("cardElem");const l=document.createElement("h3"),A=document.createElement("p"),s=document.createElement("p"),p=document.createElement("p"),u=document.createElement("button");u.classList.add("expandBtn"),u.textContent="expand_more";for(let e in o[n])l.textContent=o[n].title,A.textContent=o[n].description,s.textContent=o[n].dueDate,p.innerHTML="Priority: <br>"+o[n].priority;const m=document.createElement("div");m.id="todoCard",m.dataset.index=n;const E=document.getElementById("content"),h=document.createElement("p");h.id="trashBtn",h.textContent="delete",h.addEventListener("click",(function(){for(let n=0;n<t.length;n++)this.parentElement.parentElement.childNodes[0].textContent==t[n].title&&t.splice(n,1);localStorage.setItem("localProjektit",JSON.stringify(t)),B(t),console.log(JSON.parse(localStorage.getItem("localProjektit")))})),i.appendChild(l),a.appendChild(A),r.appendChild(s),d.appendChild(p),c.appendChild(h);const C=document.createElement("div");C.id="todoMain",C.appendChild(i),C.appendChild(r),C.appendChild(u),C.appendChild(c);const f=document.createElement("div");function g(){m.classList.toggle("visible"),m.contains(f)?m.removeChild(f):m.appendChild(f)}f.id="hiddenCard",f.appendChild(a),f.appendChild(d),u.addEventListener("click",g,!1),m.appendChild(C),e.insertBefore(m,e.firstChild),E.appendChild(e)}}function B(n){document.getElementById("content").innerHTML="",v(),h(),g(n)}function v(){const e=document.createElement("div");e.id="allText";const t=document.createElement("h2"),o=JSON.parse(localStorage.getItem("localLinkit"));t.textContent=null==o?"Default":o[n];const i=document.createElement("div");i.id="frontText";const a=document.createElement("p");a.innerHTML="Welcome! <br> Here you can add task to-do on the list. <br> Click the button to show more information!";const r=document.getElementById("content");e.appendChild(a),e.appendChild(t),i.appendChild(e),r.appendChild(i)}function x(n){document.getElementById("content").innerHTML="",v(),h(),g(n)}C=null===localStorage.getItem("localProjektit")?[]:JSON.parse(localStorage.getItem("localProjektit"));const b=document.getElementsByClassName("li");var y;null===localStorage.getItem("pageIndex")||localStorage.getItem("pageIndex")>b?(n=0,localStorage.setItem("pageIndex",JSON.stringify(n))):n=JSON.parse(localStorage.getItem("pageIndex")),function(n){const e=document.createElement("div");e.id="nav";const t=document.createElement("h3");t.textContent="Projects:",e.appendChild(t);let o=[];o=null===localStorage.getItem("localLinkit")?["Default"]:JSON.parse(localStorage.getItem("localLinkit"));const i=document.createElement("ul");i.classList.add("links");for(let e=0;e<o.length;e++){const t=document.createElement("div");t.id="linkDiv",t.dataset.index=e;const a=document.createElement("li");a.classList.add("li"),a.innerHTML=o[e],a.addEventListener("click",(function(){location.reload(),f=e,localStorage.setItem("pageIndex",JSON.stringify(f));let t=[];for(let e=0;e<n.length;e++)n[e].num==JSON.parse(localStorage.getItem("pageIndex"))&&t.push(n[e]);x(t)})),t.dataset.index=e;const r=document.createElement("p");r.id="trashBtn",r.textContent="close",r.addEventListener("click",(function(){if(1==confirm("Are you sure?")){o.splice(t.dataset.index,1),localStorage.setItem("localLinkit",JSON.stringify(o));for(let e=0;e<n.length;e++)n[e].num==t.dataset.index&&(n.splice(e,1),e--);for(let e=0;e<n.length;e++)n[e].num>t.dataset.index&&(n[e].num-=1);localStorage.setItem("localProjektit",JSON.stringify(n)),console.log(t.dataset.index),console.log(n),location.reload()}})),t.appendChild(a),t.appendChild(r),i.appendChild(t)}t.appendChild(i);const a=document.createElement("p");a.id="createNew",a.textContent="New Project +",t.appendChild(a),a.addEventListener("click",(function(){let n=prompt("Project name?");const e=document.createElement("li");e.classList.add("li"),e.textContent=n,t.appendChild(i),i.appendChild(e),o.push(n),localStorage.setItem("localLinkit",JSON.stringify(o)),location.reload()})),t.appendChild(i);const r=document.createElement("div");r.innerHTML="&copy; Petteri Leino, 2021",e.appendChild(r);const d=document.body;d.insertBefore(e,d.firstChild)}(y=C),function(){const n=document.createElement("div");n.id="header";const e=document.createElement("h1");e.textContent="To-Do List",n.appendChild(e);const t=document.body;t.insertBefore(n,t.firstChild)}(),v(),h(),g(y),function(e){class t{constructor(n,e,t,o,i){this.title=n,this.description=e,this.dueDate=t,this.priority=o,this.num=i}}let o=document.getElementById("todoForm");o.addEventListener("submit",(function(i){let a=document.getElementById("title").value,r=document.getElementById("description").value,d=document.getElementById("dueDate").value,c=document.getElementById("priority").value,l=new t(a,r,d,c,n);e.push(l),localStorage.setItem("localProjektit",JSON.stringify(e)),o.reset()}))}(C)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,